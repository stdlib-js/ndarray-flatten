{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport getShape from '@stdlib/ndarray-shape';\nimport getOrder from '@stdlib/ndarray-order';\nimport getStrides from '@stdlib/ndarray-strides';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport flattenShape from '@stdlib/ndarray-base-flatten-shape';\nimport assign from '@stdlib/ndarray-base-assign';\nimport emptyLike from '@stdlib/ndarray-empty-like';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COL_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Returns a flattened copy of an input ndarray.\n*\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.depth] - maximum number of dimensions to flatten\n* @param {string} [options.order='row-major'] - order in which input ndarray elements should be flattened\n* @param {*} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ [ [ 1.0, 2.0 ] ], [ [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ] ] ] );\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'column-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 3.0, 5.0, 2.0, 4.0, 6.0 ]\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'row-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'column-major'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 4.0, 2.0, 5.0, 3.0, 6.0 ]\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'column-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'row-major'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 3.0, 5.0, 2.0, 4.0, 6.0 ]\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'row-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'same'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'column-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'same'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -6, -2 ], 10, 'row-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 5.0, 4.0, 3.0, 2.0, 1.0 ]\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is column-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -6, -2 ], 10, 'column-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 5.0, 4.0, 3.0, 2.0, 1.0 ]\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is column-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -6, -2 ], 10, 'column-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'same'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 3.0, 5.0, 2.0, 4.0, 1.0 ]\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is column-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -6, -2 ], 10, 'column-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'any'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 5.0, 4.0, 3.0, 2.0, 1.0 ]\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is row-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -2, -4 ], 10, 'row-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 4.0, 2.0, 5.0, 3.0, 1.0 ]\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is row-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -2, -4 ], 10, 'row-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'same'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 4.0, 2.0, 5.0, 3.0, 1.0 ]\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is row-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -2, -4 ], 10, 'row-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'any'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 5.0, 4.0, 3.0, 2.0, 1.0 ]\n*/\nfunction flatten( x, options ) {\n\tvar nargs;\n\tvar view;\n\tvar opts;\n\tvar xsh;\n\tvar st;\n\tvar o;\n\tvar y;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tnargs = arguments.length;\n\txsh = getShape( x );\n\n\t// Define default options:\n\topts = {\n\t\t'depth': xsh.length,    // by default, flatten to a one-dimensional ndarray\n\t\t'order': ROW_MAJOR,     // by default, flatten in lexicographic order (i.e., trailing dimensions first; e.g., if `x` is a matrix, flatten row-by-row)\n\t\t'dtype': getDType( x )\n\t};\n\n\t// Resolve function options...\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'depth' ) ) {\n\t\t\tif ( !isNonNegativeInteger( options.depth ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2t', 'depth', options.depth ) );\n\t\t\t}\n\t\t\topts.depth = options.depth;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( options.order === 'any' ) {\n\t\t\t\t// When 'any', we want to flatten according to the physical layout of the data in memory...\n\t\t\t\to = strides2order( getStrides( x ) );\n\t\t\t\tif ( o === 1 ) {\n\t\t\t\t\t// Data is currently arranged in row-major order:\n\t\t\t\t\topts.order = ROW_MAJOR;\n\t\t\t\t} else if ( o === 2 ) {\n\t\t\t\t\t// Data is currently arranged in column-major order:\n\t\t\t\t\topts.order = COL_MAJOR;\n\t\t\t\t} else { // o === 0 || o === 3 (i.e., neither row- nor column-major || both row- and column-major\n\t\t\t\t\t// When the data is either both row- and column-major (e.g., a one-dimensional ndarray) or neither row- nor column-major (e.g., unordered strides), fallback to flattening according to the stated order of the input ndarray:\n\t\t\t\t\topts.order = getOrder( x );\n\t\t\t\t}\n\t\t\t} else if ( options.order === 'same' ) {\n\t\t\t\t// When 'same', we want to flatten according to the stated order of the input ndarray:\n\t\t\t\topts.order = getOrder( x );\n\t\t\t} else if ( isOrder( options.order ) ) {\n\t\t\t\t// When provided a specific order, flatten according to that order regardless of the order of the input ndarray:\n\t\t\t\topts.order = options.order;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( format( 'null5C', 'order', options.order ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\t// Delegate `dtype` validation to `emptyLike` during output array creation:\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t}\n\t// Create an output ndarray having contiguous memory:\n\ty = emptyLike( x, {\n\t\t'shape': flattenShape( xsh, opts.depth ),\n\t\t'order': opts.order,\n\t\t'dtype': opts.dtype\n\t});\n\n\t// Create a view on top of the output ndarray having the same shape as the input ndarray:\n\tst = ( xsh.length > 0 ) ? shape2strides( xsh, opts.order ) : [ 0 ];\n\tview = ndarray( opts.dtype, getData( y ), xsh, st, 0, opts.order );\n\n\t// Copy elements to the output ndarray:\n\tassign( [ x, view ] );\n\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default flatten;\n"],"names":["ROW_MAJOR","flatten","x","options","nargs","view","opts","xsh","st","o","y","isndarrayLike","TypeError","format","arguments","length","depth","getShape","order","dtype","getDType","isPlainObject","hasOwnProp","isNonNegativeInteger","strides2order","getStrides","getOrder","isOrder","emptyLike","shape","flattenShape","shape2strides","ndarray","getData","assign"],"mappings":";;wlDA2CA,IAAIA,EAAY,YA+OhB,SAASC,EAASC,EAAGC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeT,GACpB,MAAM,IAAIU,UAAWC,EAAQ,SAAUX,IAaxC,GAXAE,EAAQU,UAAUC,OAIlBT,EAAO,CACNU,OAJDT,EAAMU,EAAUf,IAIFa,OACbG,MAASlB,EACTmB,MAASC,EAAUlB,IAIfE,EAAQ,EAAI,CAChB,IAAMiB,EAAelB,GACpB,MAAM,IAAIS,UAAWC,EAAQ,SAAUV,IAExC,GAAKmB,EAAYnB,EAAS,SAAY,CACrC,IAAMoB,EAAsBpB,EAAQa,OACnC,MAAM,IAAIJ,UAAWC,EAAQ,SAAU,QAASV,EAAQa,QAEzDV,EAAKU,MAAQb,EAAQa,KACrB,CACD,GAAKM,EAAYnB,EAAS,SACzB,GAAuB,QAAlBA,EAAQe,MAEZT,EAAIe,EAAeC,EAAYvB,IAG9BI,EAAKY,MAFK,IAANT,EAEST,EACI,IAANS,EAtRA,eA2REiB,EAAUxB,QAElB,GAAuB,SAAlBC,EAAQe,MAEnBZ,EAAKY,MAAQQ,EAAUxB,OACjB,KAAKyB,EAASxB,EAAQe,OAI5B,MAAM,IAAIN,UAAWC,EAAQ,SAAU,QAASV,EAAQe,QAFxDZ,EAAKY,MAAQf,EAAQe,KAGrB,CAEGI,EAAYnB,EAAS,WAEzBG,EAAKa,MAAQhB,EAAQgB,MAEtB,CAeD,OAbAT,EAAIkB,EAAW1B,EAAG,CACjB2B,MAASC,EAAcvB,EAAKD,EAAKU,OACjCE,MAASZ,EAAKY,MACdC,MAASb,EAAKa,QAIfX,EAAOD,EAAIQ,OAAS,EAAMgB,EAAexB,EAAKD,EAAKY,OAAU,CAAE,GAC/Db,EAAO2B,EAAS1B,EAAKa,MAAOc,EAASvB,GAAKH,EAAKC,EAAI,EAAGF,EAAKY,OAG3DgB,EAAQ,CAAEhC,EAAGG,IAENK,CACR"}