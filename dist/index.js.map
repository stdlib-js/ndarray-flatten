{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar getStrides = require( '@stdlib/ndarray-strides' );\nvar getData = require( '@stdlib/ndarray-base-data-buffer' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar flattenShape = require( '@stdlib/ndarray-base-flatten-shape' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\nvar ndarray = require( '@stdlib/ndarray-base-ctor' );\nvar emptyLike = require( '@stdlib/ndarray-empty-like' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COL_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Returns a flattened copy of an input ndarray.\n*\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.depth] - maximum number of dimensions to flatten\n* @param {string} [options.order='row-major'] - order in which input ndarray elements should be flattened\n* @param {*} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ [ [ 1.0, 2.0 ] ], [ [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ] ] ] );\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'column-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 3.0, 5.0, 2.0, 4.0, 6.0 ]\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'row-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'column-major'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 4.0, 2.0, 5.0, 3.0, 6.0 ]\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'column-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'row-major'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 3.0, 5.0, 2.0, 4.0, 6.0 ]\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'row-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'same'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ], {\n*     'shape': [ 2, 3 ],\n*     'order': 'column-major'\n* });\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'same'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -6, -2 ], 10, 'row-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 5.0, 4.0, 3.0, 2.0, 1.0 ]\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is column-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -6, -2 ], 10, 'column-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 5.0, 4.0, 3.0, 2.0, 1.0 ]\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is column-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -6, -2 ], 10, 'column-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'same'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 3.0, 5.0, 2.0, 4.0, 1.0 ]\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is column-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -6, -2 ], 10, 'column-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'any'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 5.0, 4.0, 3.0, 2.0, 1.0 ]\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is row-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -2, -4 ], 10, 'row-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 4.0, 2.0, 5.0, 3.0, 1.0 ]\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is row-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -2, -4 ], 10, 'row-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'same'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 4.0, 2.0, 5.0, 3.0, 1.0 ]\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var xbuf = [ 1.0, null, 2.0, null, 3.0, null, 4.0, null, 5.0, null, 6.0, null ];\n*\n* // Create an ndarray whose stated order is row-major, but which has been transposed:\n* var x = new ndarray( 'generic', xbuf, [ 2, 3 ], [ -2, -4 ], 10, 'row-major' );\n* // returns <ndarray>\n*\n* var y = flatten( x, {\n*     'order': 'any'\n* });\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 6.0, 5.0, 4.0, 3.0, 2.0, 1.0 ]\n*/\nfunction flatten( x, options ) {\n\tvar view;\n\tvar opts;\n\tvar xsh;\n\tvar st;\n\tvar o;\n\tvar y;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\txsh = getShape( x );\n\n\t// Define default options:\n\topts = {\n\t\t'depth': xsh.length,    // by default, flatten to a one-dimensional ndarray\n\t\t'order': ROW_MAJOR,     // by default, flatten in lexicographic order (i.e., trailing dimensions first; e.g., if `x` is a matrix, flatten row-by-row)\n\t\t'dtype': getDType( x )\n\t};\n\n\t// Resolve function options...\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'depth' ) ) {\n\t\t\tif ( !isNonNegativeInteger( options.depth ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'depth', options.depth ) );\n\t\t\t}\n\t\t\topts.depth = options.depth;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( options.order === 'any' ) {\n\t\t\t\t// When 'any', we want to flatten according to the physical layout of the data in memory...\n\t\t\t\to = strides2order( getStrides( x ) );\n\t\t\t\tif ( o === 1 ) {\n\t\t\t\t\t// Data is currently arranged in row-major order:\n\t\t\t\t\topts.order = ROW_MAJOR;\n\t\t\t\t} else if ( o === 2 ) {\n\t\t\t\t\t// Data is currently arranged in column-major order:\n\t\t\t\t\topts.order = COL_MAJOR;\n\t\t\t\t} else { // o === 0 || o === 3 (i.e., neither row- nor column-major || both row- and column-major\n\t\t\t\t\t// When the data is either both row- and column-major (e.g., a one-dimensional ndarray) or neither row- nor column-major (e.g., unordered strides), fallback to flattening according to the stated order of the input ndarray:\n\t\t\t\t\topts.order = getOrder( x );\n\t\t\t\t}\n\t\t\t} else if ( options.order === 'same' ) {\n\t\t\t\t// When 'same', we want to flatten according to the stated order of the input ndarray:\n\t\t\t\topts.order = getOrder( x );\n\t\t\t} else if ( isOrder( options.order ) ) {\n\t\t\t\t// When provided a specific order, flatten according to that order regardless of the order of the input ndarray:\n\t\t\t\topts.order = options.order;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', options.order ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\t// Delegate `dtype` validation to `emptyLike` during output array creation:\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t}\n\t// Create an output ndarray having contiguous memory:\n\ty = emptyLike( x, {\n\t\t'shape': flattenShape( xsh, opts.depth ),\n\t\t'order': opts.order,\n\t\t'dtype': opts.dtype\n\t});\n\n\t// Create a view on top of the output ndarray having the same shape as the input ndarray:\n\tst = ( xsh.length > 0 ) ? shape2strides( xsh, opts.order ) : [ 0 ];\n\tview = new ndarray( opts.dtype, getData( y ), xsh, st, 0, opts.order );\n\n\t// Copy elements to the output ndarray:\n\tassign( [ x, view ] );\n\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = flatten;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a flattened copy of an input ndarray.\n*\n* @module @stdlib/ndarray-flatten\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var flatten = require( '@stdlib/ndarray-flatten' );\n*\n* // Create an input ndarray:\n* var x = array( [ [ [ 1.0, 2.0 ] ], [ [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ] ] ] );\n* // returns <ndarray>\n*\n* // Flatten the input ndarray:\n* var y = flatten( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAa,QAAS,iCAAkC,EACxDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAuB,QAAS,uCAAwC,EACxEC,EAAU,QAAS,sCAAuC,EAC1DC,EAAW,QAAS,uBAAwB,EAC5CC,EAAW,QAAS,uBAAwB,EAC5CC,EAAa,QAAS,yBAA0B,EAChDC,EAAU,QAAS,kCAAmC,EACtDC,EAAW,QAAS,4BAA6B,EACjDC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAe,QAAS,oCAAqC,EAC7DC,EAAS,QAAS,6BAA8B,EAChDC,EAAU,QAAS,2BAA4B,EAC/CC,EAAY,QAAS,4BAA6B,EAClDC,EAAS,QAAS,uBAAwB,EAK1CC,EAAY,YACZC,EAAY,eA8OhB,SAASC,EAASC,EAAGC,EAAU,CAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAACzB,EAAekB,CAAE,EACtB,MAAM,IAAI,UAAWJ,EAAQ,oEAAqEI,CAAE,CAAE,EAYvG,GAVAI,EAAMnB,EAAUe,CAAE,EAGlBG,EAAO,CACN,MAASC,EAAI,OACb,MAASP,EACT,MAASR,EAAUW,CAAE,CACtB,EAGK,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACpB,EAAeqB,CAAQ,EAC5B,MAAM,IAAI,UAAWL,EAAQ,qEAAsEK,CAAQ,CAAE,EAE9G,GAAKpB,EAAYoB,EAAS,OAAQ,EAAI,CACrC,GAAK,CAAClB,EAAsBkB,EAAQ,KAAM,EACzC,MAAM,IAAI,UAAWL,EAAQ,2EAA4E,QAASK,EAAQ,KAAM,CAAE,EAEnIE,EAAK,MAAQF,EAAQ,KACtB,CACA,GAAKpB,EAAYoB,EAAS,OAAQ,EACjC,GAAKA,EAAQ,QAAU,MAEtBK,EAAIf,EAAeJ,EAAYa,CAAE,CAAE,EAC9BM,IAAM,EAEVH,EAAK,MAAQN,EACFS,IAAM,EAEjBH,EAAK,MAAQL,EAGbK,EAAK,MAAQjB,EAAUc,CAAE,UAEfC,EAAQ,QAAU,OAE7BE,EAAK,MAAQjB,EAAUc,CAAE,UACdhB,EAASiB,EAAQ,KAAM,EAElCE,EAAK,MAAQF,EAAQ,UAErB,OAAM,IAAI,UAAWL,EAAQ,wEAAyE,QAASK,EAAQ,KAAM,CAAE,EAG5HpB,EAAYoB,EAAS,OAAQ,IAEjCE,EAAK,MAAQF,EAAQ,MAEvB,CAEA,OAAAM,EAAIZ,EAAWK,EAAG,CACjB,MAASR,EAAcY,EAAKD,EAAK,KAAM,EACvC,MAASA,EAAK,MACd,MAASA,EAAK,KACf,CAAC,EAGDE,EAAOD,EAAI,OAAS,EAAMd,EAAec,EAAKD,EAAK,KAAM,EAAI,CAAE,CAAE,EACjED,EAAO,IAAIR,EAASS,EAAK,MAAOf,EAASmB,CAAE,EAAGH,EAAKC,EAAI,EAAGF,EAAK,KAAM,EAGrEV,EAAQ,CAAEO,EAAGE,CAAK,CAAE,EAEbK,CACR,CAKA5B,EAAO,QAAUoB,IC9TjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "isndarrayLike", "isNonNegativeInteger", "isOrder", "getShape", "getOrder", "getStrides", "getData", "getDType", "shape2strides", "strides2order", "flattenShape", "assign", "ndarray", "emptyLike", "format", "ROW_MAJOR", "COL_MAJOR", "flatten", "x", "options", "view", "opts", "xsh", "st", "o", "y", "main"]
}
